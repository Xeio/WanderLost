@inject MerchantHubClient HubClient
@inject ClientSettingsController ClientSettings

@using System.Globalization

@{
    bool anyMerchantActive = GetVisibleMerchantGroups().Any(mg => mg.IsActive);
}
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Region</th>

            @if (anyMerchantActive)
            {
                <td>Expires</td>
                <th>Zone</th>
                <th>Card</th>
                <th>Rapport</th>
                <th>Votes</th>
                <th></th>
            }
            else
            {
                <th>Next Appearance In</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var merchantGroup in GetVisibleMerchantGroups())
        {
            int rowSpan = merchantGroup.ActiveMerchants.Count > 0 ? merchantGroup.ActiveMerchants.Count : 1;
            <tr>
                <td rowspan="@rowSpan">@merchantGroup.MerchantName</td>
                <td rowspan="@rowSpan">@merchantGroup.MerchantData.Region</td>
                @if (anyMerchantActive && merchantGroup.IsActive)
                {
                    <td rowspan="@rowSpan">@((merchantGroup.AppearanceExpires - DateTimeOffset.UtcNow).ToString(@"hh\:mm\:ss"))</td>
                }
                else if (!anyMerchantActive && merchantGroup.NextAppearance > DateTimeOffset.UtcNow)
                {
                    <td>@((merchantGroup.NextAppearance - DateTimeOffset.UtcNow).ToString(@"hh\:mm\:ss"))</td>
                }
                else
                {
                    <td>Active</td>
                }

                @if (anyMerchantActive && merchantGroup.ActiveMerchants.Count == 0)
                {
                    <td>?</td>
                    <td>?</td>
                    <td>?</td>
                    <td />
                    <td><a href="/UpdateMerchant/@Server/@merchantGroup.MerchantName">Submit Location</a></td>
                }
                else if (anyMerchantActive)
                {
                    var merchant = merchantGroup.ActiveMerchants.OrderByDescending(m => m.Votes).First();
                    <td><ZoneDisplay ZoneName="@merchant.Zone" /></td>
                    <td>
                        @if (ClientSettings.Notifications[merchant.Name].Cards.Contains(merchant.Card.Name))
                        {
                            <span class="oi oi-star text-warning mx-1"></span>
                        }
                        <ItemDisplay Item="@merchant.Card" />
                    </td>
                    <td>
                        @if (ClientSettings.Notifications[merchant.Name].Rapports.Contains(merchant.Rapport.Name))
                        {
                            <span class="oi oi-star text-warning mx-1"></span>
                        }
                        <ItemDisplay Item="@merchant.Rapport" />
                    </td>
                    <td style="white-space: nowrap;">
                        <span class="votes">@merchant.Votes</span>
                        <button class="btn btn-sm @GetVoteButtonCss(merchant.Id, VoteType.Upvote)" alt="Upvote" @onclick="@(async m => await Upvote(merchant.Id))"><span class="oi oi-thumb-up"></span></button>
                        <button class="btn btn-sm @GetVoteButtonCss(merchant.Id, VoteType.Downvote)" alt="Downvote" @onclick="@(async m => await Downvote(merchant.Id))"><span class="oi oi-thumb-down"></span></button>
                    </td>
                    <td rowspan="@rowSpan"><a class="link-danger" href="/UpdateMerchant/@Server/@merchantGroup.MerchantName">Suggest Replacement</a></td>
                }
            </tr>
            @foreach (var merchant in merchantGroup.ActiveMerchants.OrderByDescending(x => x.Votes).Skip(1))
            {
                string opacityStyle = @GetRowStyleForActiveMerchant(merchant);
                <tr>
                    <td><ZoneDisplay ZoneName="@merchant.Zone" Style="@opacityStyle"/></td>
                    <td style="@opacityStyle">
                        @if (ClientSettings.Notifications[merchant.Name].Cards.Contains(merchant.Card.Name))
                        {
                            <span class="oi oi-star text-warning mx-1"></span>
                        }
                        <ItemDisplay Item="@merchant.Card" />
                    </td>
                    <td style="@opacityStyle">
                        @if (ClientSettings.Notifications[merchant.Name].Rapports.Contains(merchant.Rapport.Name))
                        {
                            <span class="oi oi-star text-warning mx-1"></span>
                        }
                        <ItemDisplay Item="@merchant.Rapport" />
                    </td>
                    <td style="white-space: nowrap; @opacityStyle">
                        <span class="votes">@merchant.Votes</span>
                        <button class="btn btn-sm @GetVoteButtonCss(merchant.Id, VoteType.Upvote)" alt="Upvote" @onclick="@(async m => await Upvote(merchant.Id))"><span class="oi oi-thumb-up"></span></button>
                        <button class="btn btn-sm @GetVoteButtonCss(merchant.Id, VoteType.Downvote)" alt="Downvote" @onclick="@(async m => await Downvote(merchant.Id))"><span class="oi oi-thumb-down"></span></button>
                    </td>
                </tr>
            }
            @if (merchantGroup.IsActive)
            {
                <tr class="separator"><td colspan="99"></td></tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter, EditorRequired]
    public ActiveDataController ActiveData { get; set; } = default!;

    [Parameter]
    public bool ActiveOnly { get; init; }

    [Parameter, EditorRequired]
    public string Server { get; init; } = string.Empty;

    private string GetRowStyleForActiveMerchant(ActiveMerchant merchant)
    {
        if (merchant.Votes < 0)
        {
            var opacityVal = MapDecimal(merchant.Votes, ActiveData.DownvoteThresholdUntilRemoved, 0, (decimal).125, 1);
            return $"opacity: {opacityVal.ToString(CultureInfo.GetCultureInfo("en-GB"))};";
        }
        else
        {
            return "";
        }
    }

    private decimal MapDecimal(decimal value, decimal fromSource, decimal toSource, decimal fromTarget, decimal toTarget)
    {
        if (value < fromSource)
            value = fromSource;

        return (value - fromSource) / (toSource - fromSource) * (toTarget - fromTarget) + fromTarget;
    }

    private string GetVoteButtonCss(Guid merchantId, VoteType type)
    {
        if (ActiveData.Votes.TryGetValue(merchantId, out VoteType clientVote))
        {
            if (type == VoteType.Upvote && clientVote == type)
            {
                return "btn-success";

            }
            else if (type == VoteType.Downvote && clientVote == type)
            {
                return "btn-danger";
            }
        }
        //fallback
        return "btn-outline-light";
    }

    private IEnumerable<ActiveMerchantGroup> GetVisibleMerchantGroups()
    {
        return ActiveData.MerchantGroups.Where(mg => mg.IsActive ^ !ActiveOnly);
    }

    public async Task Upvote(Guid merchantId)
    {
        await HubClient.Vote(Server, merchantId, VoteType.Upvote);
    }

    public async Task Downvote(Guid merchantId)
    {
        await HubClient.Vote(Server, merchantId, VoteType.Downvote);
    }
}
