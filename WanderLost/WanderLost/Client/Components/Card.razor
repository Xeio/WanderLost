<CardFrame Title="@Title" Rarity="@TopRarity" ClassName="@ClassName">
  <div class="m-card__location" @onclick="@(() => OnLocationClick?.Invoke(Merchant.Zone))" style="background-image: url(/images/zones/@(Uri.EscapeDataString(Merchant.Zone)).jpg)" />
  <div class="stock">
    <div class="stock__item stock__item_r--@CardRarity">
      @Merchant.Card.Name
    </div>
    <div class="stock__item stock__item_r--@RapportRarity">
      @Merchant.Rapport.Name
    </div>
  </div>
  <div class="m-card__buttons">
    <CardButton Type="CardButton.Variant.Like" OnClick="@(async () => await SubmitVote(Merchant.Id, VoteType.Upvote))" Active="@(CurrentVote(Merchant.Id) == VoteType.Upvote)" />
    <div class="m-card__score">@Merchant.Votes</div>
    <CardButton Type="CardButton.Variant.Dislike" OnClick="@(async () => await SubmitVote(Merchant.Id, VoteType.Downvote))" Active="@(CurrentVote(Merchant.Id) == VoteType.Downvote)" />
  </div>
</CardFrame>

@code {
  private static Dictionary<Rarity, string> RarityMapping = new Dictionary<Rarity, string>()
  {
    {WanderLost.Shared.Data.Rarity.Normal, "normal"},
    {WanderLost.Shared.Data.Rarity.Uncommon, "uncommon"},
    {WanderLost.Shared.Data.Rarity.Rare, "rare"},
    {WanderLost.Shared.Data.Rarity.Epic, "epic"},
    {WanderLost.Shared.Data.Rarity.Legendary, "legendary"},
    {WanderLost.Shared.Data.Rarity.Relic, "relic"}
  };

  [Parameter, EditorRequired]
  public ActiveMerchant Merchant { get; set; }

  [Parameter, EditorRequired]
  public Func<Guid, VoteType, Task> SubmitVote { get; set; }

  [Parameter]
  public Action<string>? OnLocationClick { get; set; }

  [Parameter, EditorRequired]
  public Func<Guid, VoteType> CurrentVote { get; set; }

  [Parameter]
  public string ClassName { get; set; }

  public string Title
  {
    get
    {
      return Merchant.Name + ' ' + Merchant.Zone;
    }
  }

  public string CardRarity
  {
    get
    {
      return RarityMapping[Merchant.Card.Rarity];
    }
  }

  public string RapportRarity
  {
    get
    {
      return RarityMapping[Merchant.Rapport.Rarity];
    }
  }

  public string TopRarity
  {
    get
    {
      // Due to rapport items being either epic or legs, we only change border colour upon leg rapport
      // Otherwise the card rarity colour is more informative
      Rarity topRarity = Merchant.Rapport.Rarity.CompareTo(Rarity.Legendary) >= 0 ? Merchant.Rapport.Rarity : Merchant.Card.Rarity;

      return RarityMapping[topRarity];
    }
  }

}
