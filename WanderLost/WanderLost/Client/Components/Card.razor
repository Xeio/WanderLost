@inject MerchantHubClient HubClient
@inject NavigationManager NavManager

<CardFrame Title="@Region" Subtitle="@Merchant.Zone" Rarity="@TopRarity" ClassName="@ClassName">
  @if(!CollapseCards){
    <div class="m-card__location @LoactionActiveClass" @onclick="@(() => OnLocationClick?.Invoke(Merchant.Zone))" style="background-image: url(/images/zones/@(Uri.EscapeDataString(Merchant.Zone)).jpg)" />
  }
  <div class="stock">
    <div class="stock__item stock__item_r--@CardRarity">
      @Merchant.Card.Name
    </div>
    <div class="stock__item stock__item_r--@RapportRarity">
      @Merchant.Rapport.Name
    </div>
  </div>
  <div class="m-card__buttons">
        <CardButton ClassName="m-card__like" Type="CardButton.Variant.Like" OnClick="@(async () => await SubmitVote(VoteType.Upvote))" Active="@(CurrentVote == VoteType.Upvote)" />
    <div class="m-card__score">@Merchant.Votes</div>
        <CardButton ClassName="m-card__dislike" Type="CardButton.Variant.Dislike" OnClick="@(async () => await SubmitVote(VoteType.Downvote))" Active="@(CurrentVote == VoteType.Downvote)" />
    <CardButton ClassName="m-card__report" Hint="@ReportButtonHint" Type="CardButton.Variant.Report" OnClick="@OnClickReport" />
  </div>
</CardFrame>

@code {
    private static Dictionary<Rarity, string> RarityMapping = new Dictionary<Rarity, string>()
    {
        {WanderLost.Shared.Data.Rarity.Normal, "uncommon"},
        {WanderLost.Shared.Data.Rarity.Uncommon, "uncommon"},
        {WanderLost.Shared.Data.Rarity.Rare, "rare"},
        {WanderLost.Shared.Data.Rarity.Epic, "epic"},
        {WanderLost.Shared.Data.Rarity.Legendary, "legendary"},
        {WanderLost.Shared.Data.Rarity.Relic, "relic"}
    };

    [CascadingParameter]
    public ActiveDataController ActiveData { get; init; } = default!;

    [CascadingParameter(Name = "CollapseCards")]
    public bool CollapseCards { get; init; }

    [Parameter, EditorRequired]
    public ActiveMerchant Merchant { get; set; }

    [Parameter]
    public Action<string>? OnLocationClick { get; set; }

    [Parameter]
    public string ClassName { get; set; }

    [Parameter]
    public string Server { get; set; }

    [Parameter]
    public string Region { get; set; } = string.Empty;

    public string CardRarity
    {
        get
        {
            return RarityMapping[Merchant.Card.Rarity];
        }
    }

    public string RapportRarity
    {
        get
        {
            return RarityMapping[Merchant.Rapport.Rarity];
        }
    }

    public string TopRarity
    {
        get
        {
            // Due to rapport items being either epic or legs, we only change border colour upon leg rapport
            // Otherwise the card rarity colour is more informative
            Rarity topRarity = Merchant.Rapport.Rarity.CompareTo(Rarity.Legendary) >= 0 ? Merchant.Rapport.Rarity : Merchant.Card.Rarity;

            return RarityMapping[topRarity];
        }
    }

    public string LoactionActiveClass
    {
        get
        {
            return OnLocationClick is not null ? "m-card__location--active" : "";
        }
    }

    public void OnClickReport()
    {
        NavManager.NavigateTo($"/UpdateMerchant/{Server}/{Merchant.Name}");
    }

    public string ReportButtonHint
    {
        get
        {
            return CurrentVote is not null ? "Suggest new location" : "Submit correction";
        }
    }

    public async Task SubmitVote(VoteType vote)
    {
        await HubClient.Vote(Server, Merchant.Id, CurrentVote == vote ? VoteType.Unvote : vote);
    }

    public VoteType? CurrentVote
    {
        get
        {
            if (ActiveData.Votes.TryGetValue(Merchant.Id, out VoteType existingVote))
            {
                return existingVote;
            }
            return null;
        }
    }
}