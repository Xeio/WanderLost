<div class="merchant @(ClassName)">
  @if (!hasMerchants)
  {
    <EmptyCard MerchantName="@MerchantGroup.MerchantName" Server="@Server" Region="@Region" />
  }
  else
  {
    @if (SecondaryMerchant != null)
    {
      <div class="merchant__deck" @onclick="ShowOverlay">
        @if (TetriraryMerchant != null)
        {
          <Card ClassName="merchant__card merchant__card--tetriary" Merchant="@TetriraryMerchant" Server="@Server" Region="@Region" />
        }
        <Card ClassName="merchant__card merchant__card--secondary" Merchant="@SecondaryMerchant" Server="@Server" Region="@Region" />
      </div>
    }
    <Card ClassName="merchant__card" Merchant="@MainMerchant" Server="@Server" Region="@Region" OnLocationClick="@ShowMap" />
  }
</div>

@code {
  [CascadingParameter(Name = "Overlay")]
  public IOverlay Overlay { get; init; } = default!;

  [Parameter, EditorRequired]
  public ActiveMerchantGroup MerchantGroup { get; set; } = default!;

  [Parameter, EditorRequired]
  public string Server { get; set; } = default!;

  [Parameter]
  public string? ClassName { get; set; }

  public string Region
  {
    get
    {
      return MerchantGroup.MerchantData.Region;
    }
  }

  public bool hasMerchants
  {
    get
    {
      return MerchantGroup.ActiveMerchants.Count > 0;
    }
  }

  public ActiveMerchant? MainMerchant
  {
    get
    {
      return MerchantGroup.ActiveMerchants.OrderByDescending(x => x.Votes).FirstOrDefault();
    }
  }

  public ActiveMerchant? SecondaryMerchant
  {
    get
    {
      return MerchantGroup.ActiveMerchants.OrderByDescending(x => x.Votes).Skip(1).FirstOrDefault();
    }
  }

  public ActiveMerchant? TetriraryMerchant
  {
    get
    {
      return MerchantGroup.ActiveMerchants.OrderByDescending(x => x.Votes).Skip(2).FirstOrDefault();
    }
  }

  public void ShowOverlay()
  {
    Overlay.ShowMerchantGroup(MerchantGroup, Server, Region);
  }

  public void ShowMap(string Zone)
  {
     Overlay.ShowMap(Zone);
  }
}