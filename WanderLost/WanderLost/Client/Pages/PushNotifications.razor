@page "/PushNotifications"

@inject ClientSettingsController ClientSettings
@inject ClientNotificationService NotificationService
@inject ClientStaticDataController StaticData
@inject MerchantHubClient HubClient

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="container alert alert-danger">
        @Error
    </div>
}
else if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="container alert alert-info">
        @Message
    </div>
}


<div class="container">
    @if(!string.IsNullOrWhiteSpace(PushSubscription.Token))
    {
        <h3>Subscribed to server: <strong>@PushSubscription.Server</strong></h3>
        <EditForm EditContext="@_editContext">
            <div>
                Add Card Notifications
                <select @bind="@SelectedCard">
                    <option value="" class="rarity-dropdown"></option>
                    @foreach (var card in StaticData.Merchants.SelectMany(m => m.Value.Cards)
                                                                .Where(c => c.Rarity >= Rarity.Epic)
                                                                .Where(c => !PushSubscription.CardNotifications.Any(cn => cn.CardName == c.Name))
                                                                .DistinctBy(c => c.Name)
                                                                .OrderByDescending(c => c.Rarity)
                                                                .ThenBy(c => c.Name))
                    {
                        <option value="@card.Name" class="rarity--@card.Rarity">@card.Name</option>
                    }
                </select>
            </div>
            @if (PushSubscription.CardNotifications.Any())
            {
                <div>
                    Notified Cards
                @foreach (var selectedCard in PushSubscription.CardNotifications.OrderBy(cn => cn.CardName))
                {
                    var card = StaticData.Merchants.SelectMany(m => m.Value.Cards).First(c => c.Name == selectedCard.CardName);
                    <div class="border border-secondary rounded p-2 m-1 text-nowrap d-inline-block rarity--@card.Rarity">
                        @selectedCard.CardName <span @onclick="@(() => RemoveCardSelection(selectedCard.CardName))">❌</span>
                    </div>
                }
                </div>
                <div class="form-group form-check form-switch col-lg-3 m-3">
                    <label class="form-label" for="rapportVoteThreshold">Minimum card upvotes</label>
                    <InputNumber class="form-control col-2" id="cardVoteThreshold" @bind-Value="PushSubscription.CardVoteThreshold" />
                </div>
            }

            <div class="form-group form-check form-switch m-3">
                <InputCheckbox class="form-check-input" id="chkRapport" @bind-Value="PushSubscription.LegendaryRapportNotify"/>
                <label class="form-check-label" for="chkRapport"> <ItemDisplay Item="@(new Item { Name = "Legendary", Rarity = Rarity.Legendary })" /> Rapport</label>
            </div>
            @if (PushSubscription.LegendaryRapportNotify)
            {
                <div class="form-group form-check form-switch col-lg-3 m-3">
                    <label class="form-label" for="rapportVoteThreshold">Minimum rapport upvotes</label>
                    <InputNumber class="form-control col-2" id="rapportVoteThreshold" @bind-Value="PushSubscription.RapportVoteThreshold" />
                </div>
            }

            <button class="btn btn-success m-2" @onclick="AddUpdateSubcription" disabled="@(!_editContext.IsModified())">Update/Add subscription</button>
            <button class="btn btn-danger m-2" @onclick="DeleteSubcription" disabled="@(!_hasServerSubscription)">Delete subscription</button>

            <button class="btn btn-info m-2" @onclick="SetTestSubscription">Send Test Push Notification</button>
        </EditForm>
    }
    
    <div class="mt-5">
        <p>Push notifications are designed to work in the background or on a mobile device, and will not fire if this site is opened and in the foreground window at the time. Use the standard notifications settings if you have the site open in a visible browser tab.</p>
        <h4>Browser Compatability:</h4>
        <p><strong>Windows</strong>: Seems to work well in Firefox, Chrome, and Edge.</p>
        <p><strong>Android</strong>: Chrome seems to work. Edge and Firefox on android <strong>do not</strong> appear to work and never recieve push notifications.</p>
        <p><strong>Other</strong>: Unknown, you'll want to test yourself.</p>
        <p>You should make sure to run a Test on your device, which will push a notification in the next polling window (usually delivered in around 30 seconds). You can click the button again to run another test.</p>
    </div>
</div>

@code{
    public string Error { get; set; } = string.Empty;
    public string Message { get; set; } = "Loading push subscription settings...";

    private PushSubscription PushSubscription { get; set; } = new();
    private EditContext _editContext = new(true);
    private bool _hasServerSubscription = false;

    public string SelectedCard
    {
        get
        {
            return string.Empty;
        }
        set
        {
            AddCardSelection(value);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await StaticData.Init();
        await ClientSettings.Init();
        await HubClient.Connect();

        if (!await NotificationService.IsSupportedByBrowser())
        {
            Error = "Notifications do not appear to be supported by your browser.";
            return;
        }

        if (!await NotificationService.RequestPermission())
        {
            Error = "You must grant notification permission for push notifications.";
            return;
        }

        _editContext = new(PushSubscription);

        if (string.IsNullOrWhiteSpace(ClientSettings.Server))
        {
            Error = "Select server on main page to subscribe to push notifications";
            return;
        }

        var currentToken = await NotificationService.GetFCMToken();

        await NotificationService.ValidatePushSubscription(HubClient, currentToken);

        if (string.IsNullOrWhiteSpace(currentToken))
        {
            Error = "Failed to retrieve push token from browser service worker.";
            return;
        }

        var serverSubscription = await HubClient.GetPushSubscription(currentToken);
        if(serverSubscription != null && !string.IsNullOrWhiteSpace(serverSubscription.Server))
        {
            PushSubscription = serverSubscription;
            _editContext = new(PushSubscription);
            _hasServerSubscription = true;
            if(ClientSettings.Server != PushSubscription.Server)
            {
                Error = $"Your current subscription to '{PushSubscription.Server}' does not match your selected game server '{ClientSettings.Server}'. Update your subscription to correct.";
                _editContext.NotifyFieldChanged(_editContext.Field(nameof(PushSubscription.Server)));
            }
        }
        else
        {
            PushSubscription.Server = ClientSettings.Server;
            PushSubscription.Token = currentToken;
        }

        Message = string.Empty;
    }

    private async Task AddUpdateSubcription()
    {
        PushSubscription.Server = ClientSettings.Server;

        await HubClient.UpdatePushSubscription(PushSubscription);

        await ClientSettings.SetSavedPushSubscription(PushSubscription);

        _editContext.MarkAsUnmodified();
        _hasServerSubscription = true;

        Error = string.Empty;
        Message = "Subscription updated";
    }

    private async Task DeleteSubcription()
    {
        await HubClient.RemovePushSubscription(PushSubscription.Token);

        await ClientSettings.SetSavedPushSubscription(null);

        _hasServerSubscription = false;
        _editContext.NotifyFieldChanged(_editContext.Field(nameof(PushSubscription.Server)));

        Error = string.Empty;
        Message = "Subscription deleted";
    }

    private async Task SetTestSubscription()
    {
        PushSubscription.SendTestNotification = true;

        await HubClient.UpdatePushSubscription(PushSubscription);

        PushSubscription.SendTestNotification = false; //Don't want to save the test setting
        await ClientSettings.SetSavedPushSubscription(PushSubscription);

        _editContext.MarkAsUnmodified();
        _hasServerSubscription = true;

        Error = string.Empty;
        Message = @"Sending test notification... Should take around 30 seconds. Close this tab, or focus a different tab in the same window.";
    }

    private void AddCardSelection(string cardName)
    {
        PushSubscription.CardNotifications.Add(new CardNotification() { CardName = cardName });
        _editContext.NotifyFieldChanged(_editContext.Field(nameof(PushSubscription.CardNotifications)));
    }

    private void RemoveCardSelection(string cardName)
    {
        if (PushSubscription.CardNotifications.FirstOrDefault(cn => cn.CardName == cardName) is CardNotification cardNotification)
        {
            PushSubscription.CardNotifications.Remove(cardNotification);
            _editContext.NotifyFieldChanged(_editContext.Field(nameof(PushSubscription.CardNotifications)));
        }
    }
}