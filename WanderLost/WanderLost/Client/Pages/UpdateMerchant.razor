@page "/UpdateMerchant/{Server}/{MerchantName}/"
@using Microsoft.AspNetCore.SignalR

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ClientStaticDataController StaticData
@inject MerchantHubClient HubClient
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<PageTitle>Submit Merchant Location</PageTitle>
<h1>Submit Location for @ActiveMerchant.Name - @MerchantData?.Region</h1>

<EditForm Model="ActiveMerchant">
    <div class="row">
        <div class="col-sm-6">
            <div class="card border-secondary mb-3">
                <div class="card-header">Zone</div>
                <div class="card-body">
                    <InputRadioGroup @bind-Value="ActiveMerchant.Zone">
                        @foreach(var zone in MerchantData?.Zones ?? Enumerable.Empty<string>())
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" Value="@zone" id="@zone"/>
                                <label class="form-check-label" for="@zone"><ZoneDisplay ZoneName="@zone"/></label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="card border-secondary mb-3">
                <div class="card-header">Card</div>
                <div class="card-body">
                    @foreach(var card in MerchantData?.Cards ?? Enumerable.Empty<Item>())
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" checked="@(ActiveMerchant.Cards.Any(c => c.Name == card.Name))" @onchange="@((arg) => UpdateCardChecked(arg, card))" id="@card.Name" />
                            <label class="form-check-label" for="@card.Name"><ItemDisplay Item="@card" /></label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="card border-secondary mb-3">
                <div class="card-header">Rapport Item</div>
                <div class="card-body">
                    @foreach(var rapport in MerchantData?.Rapports ?? Enumerable.Empty<Item>())
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" checked="@(ActiveMerchant.Rapports.Any(r => r.Name == rapport.Name))" @onchange="@((arg) => UpdateRapportChecked(arg, rapport))" id="@rapport.Name" />
                            <label class="form-check-label" for="@rapport.Name"><ItemDisplay Item="@rapport" /></label>
                        </div>
                    }
                </div>
            </div>
        </div>
        @if (MerchantData?.Tradeskills?.Count > 0)
        {
            <div class="col-sm-6">
                <div class="card border-secondary mb-3">
                    <div class="card-header">Tradeskill Pouch</div>
                    <div class="card-body">
                        <InputRadioGroup @bind-Value="ActiveMerchant.Tradeskill">
                            @foreach (var item in MerchantData.Tradeskills)
                            {
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="@item" id="@item" />
                                    <label class="form-check-label" for="@item">
                                        <ItemDisplay Item="@(new Item(){ Name = item, Rarity = item.Contains("(") ? Rarity.Normal : Rarity.Epic})" />
                                    </label>
                                </div>
                            }
                        </InputRadioGroup>
                    </div>
                </div>
            </div>
        }
    </div>
    @if (ActiveMerchant.IsRareCombination)
    {
        <AuthorizeView>
            <NotAuthorized Context="AuthorizeWarn">
                <div class="alert @_authMessageStyle">
                    You are trying to submit a rare combination, which requires logging in.
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }
    <button class="btn btn-success" @onclick="Submit" disabled="@(!ActiveMerchant.IsValid(StaticData.Merchants))">Submit</button>
</EditForm>

@code{
    [Parameter]
    public string Server { get; set; } = string.Empty;

    [Parameter]
    public string MerchantName { get; set; } = string.Empty;

    public MerchantData? MerchantData { get; set; }

    public ActiveMerchant ActiveMerchant { get; set; } = new();

    private readonly List<IDisposable> _hubEvents = new();

    private string _authMessageStyle = "alert-warning";

    protected override async Task OnInitializedAsync()
    {
        await StaticData.Init();

        MerchantData = StaticData.Merchants[MerchantName];

        _hubEvents.Add(HubClient.OnUpdateMerchantGroup((server, merchantGroup) =>
        {
            if (Server == server && merchantGroup.MerchantName == MerchantName)
            {
                //Someone else beat us to submitting the merchant, just go back to index
                NavigationManager.NavigateTo("/");
            }
        }));

        await HubClient.Connect();

        await HubClient.SubscribeToServer(Server);

        ActiveMerchant = new ActiveMerchant() { Name = MerchantName };
    }

    private async Task Submit()
    {
        try
        {
            await HubClient.UpdateMerchant(Server, ActiveMerchant);
        }
        catch (HubException hubException) when (hubException.Message.Contains("unauthorized"))
        {
            _authMessageStyle = "alert-danger";
            return;
        }
        NavigationManager.NavigateTo("/");
    }

    public ValueTask DisposeAsync()
    {
        foreach(var hubEvent in _hubEvents)
        {
            hubEvent.Dispose();
        }
        _hubEvents.Clear();

        return ValueTask.CompletedTask;
    }

    private void UpdateCardChecked(ChangeEventArgs args, Item card)
    {
        if(args.Value is bool val && val)
        {
            ActiveMerchant.Cards.Add(card);
        }
        else
        {
            ActiveMerchant.Cards.Remove(card);
        }
    }

    private void UpdateRapportChecked(ChangeEventArgs args, Item rapport)
    {
        if (args.Value is bool val && val)
        {
            ActiveMerchant.Rapports.Add(rapport);
        }
        else
        {
            ActiveMerchant.Rapports.Remove(rapport);
        }
    }
}