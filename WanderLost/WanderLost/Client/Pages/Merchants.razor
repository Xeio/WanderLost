@page "/"

<PageTitle>Lost Merchants</PageTitle>

@if (ClientSettings.NotificationsEnabled && ClientSettings.NotifyBrowserSoundEnabled)
{
    <BrowserSoundDisabledPopup/>
}

<MessageOfTheDay/>

@if (HubClient.HubConnection.State == Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Disconnected)
{
    <div class="alert alert-danger">
        Disconnected from server. <a href="" class="alert-link" @onclick="@(() => { NavigationManager.NavigateTo("", true); })">Try to Reload.</a>
    </div>
}
else if (HubClient.HubConnection.State == Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Reconnecting)
{
    <div class="alert alert-warning">
        Disconnected from server, automatically attempting to reconnect... <a href="" class="alert-link" @onclick="@(() => { NavigationManager.NavigateTo("", true); })">Or you can try to reload.</a>
    </div>
}
<div class="merchants__content @ContentClass">
    <div class="merchants__controls">
        <div class="merchants__select-container">
            <div class="merchants__label brand-label">Server Region:</div>
            <select class="merchants__select" id="severRegion" @bind="@ServerRegion">
                <option></option>
                @foreach (var datacenter in StaticData.ServerRegions)
                {
                    <option value="@datacenter.Key">@datacenter.Value.Name</option>
                }
            </select>
        </div>

        <div class="merchants__select-container">
            <div class="merchants__label brand-label">Server:</div>
            <select class="merchants__select" id="server" @bind="@Server">
                <option></option>
                @if (!string.IsNullOrWhiteSpace(ServerRegion))
                {
                    @foreach (var datacenter in StaticData.ServerRegions[ServerRegion].Servers ?? Enumerable.Empty<string>())
                    {
                        <option>@datacenter</option>
                    }
                }
            </select>
        </div>

        @if (!string.IsNullOrWhiteSpace(Server))
        {
            <div class="merchants__notification">
                <NotificationToggle/>
            </div>
        }
    </div>
    
    @if (ActiveData.MerchantGroups.Count > 0)
    {
        <CascadingValue Value="@ActiveData">
            <Overlay>
                <CascadingValue Value="@ClientSettings.CompactMode" Name="CompactMode">
                    @if (ActiveData.MerchantGroups.FirstOrDefault(mg => mg.IsActive) is ActiveMerchantGroup activeGroup)
                    {
                        <h3 class="mt-3 merchants__active-merchants">
                            Active Merchants
                            <span class="merchants__timer">Expires in @((activeGroup.AppearanceExpires - DateTimeOffset.UtcNow).ToString(@"mm\:ss"))</span>
                        </h3>
                        @if (ClientSettings.CompactMode)
                        {
                            <MerchantGridCompact ActiveData="@ActiveData" Server="@Server"/>
                        }
                        else
                        {
                            <MerchantGrid  ActiveData="@ActiveData" Server="@Server"/>
                        }
                    }
                    <FutureMerchantsGrid ClassName="merchants__future-grid" ActiveData="@ActiveData" Server="@Server"/>
                </CascadingValue>
            </Overlay>
        </CascadingValue>
    }
</div>