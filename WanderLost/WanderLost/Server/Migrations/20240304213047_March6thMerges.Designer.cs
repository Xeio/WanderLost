// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WanderLost.Server.Controllers;

#nullable disable

namespace WanderLost.Server.Migrations
{
    [DbContext(typeof(MerchantsDbContext))]
    [Migration("20240304213047_March6thMerges")]
    partial class March6thMerges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WanderLost.Server.Data.Ban", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClientId", "ExpiresAt");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("WanderLost.Server.Data.SentPushNotification", b =>
                {
                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("MerchantId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SentPushNotifications");
                });

            modelBuilder.Entity("WanderLost.Server.Data.WanderlostUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("BanExpires")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("BannedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.DiscordCardNotification", b =>
                {
                    b.Property<decimal>("DiscordNotificationUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CardName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("DiscordNotificationUserId", "CardName");

                    b.HasIndex("CardName");

                    b.ToTable("DiscordCardNotifications");
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.DiscordNotification", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("CardVoteThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("CatalystNotification")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("SendTestNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("SendTestNotification")
                        .HasFilter("[SendTestNotification] = 1");

                    b.HasIndex("Server");

                    b.ToTable("DiscordNotifications");
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.SentDiscordNotification", b =>
                {
                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscordNotificationUserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("MerchantId", "DiscordNotificationUserId");

                    b.HasIndex("DiscordNotificationUserId");

                    b.ToTable("SentDiscordNotifications");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.ActiveMerchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActiveMerchantGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PostProcessComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresLeaderboardProcessing")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresProcessing")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresVoteProcessing")
                        .HasColumnType("bit");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UploadedByUserId")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMerchantGroupId");

                    b.HasIndex("PostProcessComplete")
                        .HasFilter("[PostProcessComplete] = 0");

                    b.HasIndex("RequiresLeaderboardProcessing")
                        .HasFilter("[RequiresLeaderboardProcessing] = 1");

                    b.HasIndex("RequiresProcessing")
                        .HasFilter("[RequiresProcessing] = 1");

                    b.HasIndex("RequiresVoteProcessing")
                        .HasFilter("[RequiresVoteProcessing] = 1");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("ActiveMerchants");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.ActiveMerchantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AppearanceExpires")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("NextAppearance")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasAlternateKey("AppearanceExpires", "Server", "MerchantName");

                    b.ToTable("MerchantGroups");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.CardNotification", b =>
                {
                    b.Property<int>("PushSubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("CardName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("PushSubscriptionId", "CardName");

                    b.HasIndex("CardName");

                    b.ToTable("CardNotifications");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.LeaderboardEntry", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PrimaryServer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalSubmissions")
                        .HasColumnType("int");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardVoteThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("CatalystNotification")
                        .HasColumnType("bit");

                    b.Property<int>("ConsecutiveFailures")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LegendaryRapportNotify")
                        .HasColumnType("bit");

                    b.Property<int>("RapportVoteThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("SendTestNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WeiNotify")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasAlternateKey("Token");

                    b.HasIndex("SendTestNotification")
                        .HasFilter("[SendTestNotification] = 1");

                    b.HasIndex("Server");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ActiveMerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserId")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMerchantId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WanderLost.Server.Data.WanderlostUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WanderLost.Server.Data.WanderlostUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderLost.Server.Data.WanderlostUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WanderLost.Server.Data.WanderlostUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderLost.Server.Data.SentPushNotification", b =>
                {
                    b.HasOne("WanderLost.Shared.Data.ActiveMerchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderLost.Shared.Data.PushSubscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.DiscordCardNotification", b =>
                {
                    b.HasOne("WanderLost.Server.Discord.Data.DiscordNotification", null)
                        .WithMany("CardNotifications")
                        .HasForeignKey("DiscordNotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.SentDiscordNotification", b =>
                {
                    b.HasOne("WanderLost.Server.Discord.Data.DiscordNotification", null)
                        .WithMany()
                        .HasForeignKey("DiscordNotificationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderLost.Shared.Data.ActiveMerchant", b =>
                {
                    b.HasOne("WanderLost.Shared.Data.ActiveMerchantGroup", "ActiveMerchantGroup")
                        .WithMany("ActiveMerchants")
                        .HasForeignKey("ActiveMerchantGroupId");

                    b.OwnsMany("WanderLost.Shared.Data.Item", "Cards", b1 =>
                        {
                            b1.Property<Guid>("ActiveMerchantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<int>("Rarity")
                                .HasColumnType("int");

                            b1.HasKey("ActiveMerchantId", "Name");

                            b1.ToTable("ActiveMerchants_Cards");

                            b1.WithOwner()
                                .HasForeignKey("ActiveMerchantId");
                        });

                    b.OwnsMany("WanderLost.Shared.Data.Item", "MiscItems", b1 =>
                        {
                            b1.Property<Guid>("ActiveMerchantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<int>("Rarity")
                                .HasColumnType("int");

                            b1.HasKey("ActiveMerchantId", "Name");

                            b1.ToTable("ActiveMerchants_MiscItems");

                            b1.WithOwner()
                                .HasForeignKey("ActiveMerchantId");
                        });

                    b.OwnsMany("WanderLost.Shared.Data.Item", "Rapports", b1 =>
                        {
                            b1.Property<Guid>("ActiveMerchantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<int>("Rarity")
                                .HasColumnType("int");

                            b1.HasKey("ActiveMerchantId", "Name");

                            b1.ToTable("ActiveMerchants_Rapports");

                            b1.WithOwner()
                                .HasForeignKey("ActiveMerchantId");
                        });

                    b.Navigation("ActiveMerchantGroup");

                    b.Navigation("Cards");

                    b.Navigation("MiscItems");

                    b.Navigation("Rapports");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.CardNotification", b =>
                {
                    b.HasOne("WanderLost.Shared.Data.PushSubscription", null)
                        .WithMany("CardNotifications")
                        .HasForeignKey("PushSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderLost.Shared.Data.Vote", b =>
                {
                    b.HasOne("WanderLost.Shared.Data.ActiveMerchant", null)
                        .WithMany("ClientVotes")
                        .HasForeignKey("ActiveMerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderLost.Server.Discord.Data.DiscordNotification", b =>
                {
                    b.Navigation("CardNotifications");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.ActiveMerchant", b =>
                {
                    b.Navigation("ClientVotes");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.ActiveMerchantGroup", b =>
                {
                    b.Navigation("ActiveMerchants");
                });

            modelBuilder.Entity("WanderLost.Shared.Data.PushSubscription", b =>
                {
                    b.Navigation("CardNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
